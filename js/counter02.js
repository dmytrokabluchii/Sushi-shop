// добавляем прослушку на всем окне при клике
window.addEventListener('click', (event) => {
    // Перемен-я для счетчика
    let counter;
    // Провер-м дейст-но ли мы кликнули по кнопке - или +
    if (event.target.dataset.action === 'plus' || event.target.dataset.action === 'minus') {
        // Находим ближ-го родит-ля (наших кнопок + и -) соот. опред-му селектору, поможет метод closest
        // что-бы в дальнейшем через этого родителя мы могли обратится к любой из кнопок в наших карточках
        const counterWrapper = event.target.closest('.counter-wrapper');
        // обращаемся к нашему html атрибуту(data-counter) в верстке, таким образом мы нашли наш div со счетчиком
        counter = counterWrapper.querySelector('[data-counter]');
    }
    
    // Провер-м явл-ся ли элемент по которому кликнули кнопкой плюс +
    // далее обрат-ся к атрибуту data-action, испол-ся св-во .dataset, подр-е про него в конце кода!
    if (event.target.dataset.action === 'plus') {
        // ++ даст нам увелич-е счет-ка на +1 и это знач-е останется в перем-й пока не кликнем еще раз
        counter.innerText = ++counter.innerText;
    }

    // Провер-м явл-ся ли элемент по которому кликнули кнопкой минус -
    if (event.target.dataset.action === 'minus') {
        // Проверяем что-бы счетчик был больше 0
        if (parseInt(counter.innerText) > 1) {
            counter.innerText = --counter.innerText;
            // если при нажатии на кнопку минус к корзине кол-во ролов становится 0, то удал-м карточку с корзины
            // проверка на товар в корзине, где '.cart-wrapper' общий div-елемент с товарами в корзине
        } else if (event.target.closest('.cart-wrapper') && parseInt(counter.innerText) === 1) {
            // удал-м карточку ('.cart-item') с корзины
            event.target.closest('.cart-item').remove();
            // Отображ-е статуса корзины Пустая / Полная
            toggleCardStatus();
            // Пересчет общей стоимости товаров в корзине (что-бы у нас был 0 при удалении товара с корзины)
            calcCardPriceAndDelivery();
        }
    }

    // Проверяем клик на + или - внутри корзины
    if (event.target.hasAttribute('data-action') && event.target.closest('.cart-wrapper')) {
        // Пересчет общей стоимости товаров в корзине
        calcCardPriceAndDelivery();
    }
    
});




// Нужно запомнить с урока!!!

// event.target
// Свойство target интерфейса Event является ссылкой на объект, который был инициатором события. 
// В нашем случае елемент по которому мы кликнули

// dataset
// Все атрибуты, начинающиеся с префикса «data-», зарезервированы для использования программистами. Они доступны в 
// свойстве dataset. Например, если у elem есть атрибут "data-action", то обрат-ся к нему можно как elem.dataset.action
// при этом слово data уже опускается. Элемент по кот-му мы кликнули описывается в event.target, обратим-ся к нему: 
// console.log(event.target.dataset.action);

// closest()
// Метод Element.closest() возвращает ближайший родительский элемент (или сам элемент), который соответствует 
// заданному CSS-селектору, или null, если таковых элементов вообще нет. Если обращ-ся к классу то делаем это через .

// innerText
// св-во .innerText элемента counter отвеч-т за текст запис-й внутри тега и мы его можем менять

// parseInt()
// приним. строку в кач-ве аргум-а и возв-т целое число в соот. с указ-м основанием системы счисления

// hasAttribute()
// Метод возвращает Boolean значение указывающее, имеет ли указанный элемент указанный атрибут или нет.
